// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: com/daml/ledger/api/v1/trace_context.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Daml.Ledger.Api.V1 {

  /// <summary>Holder for reflection information generated from com/daml/ledger/api/v1/trace_context.proto</summary>
  public static partial class TraceContextReflection {

    #region Descriptor
    /// <summary>File descriptor for com/daml/ledger/api/v1/trace_context.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TraceContextReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cipjb20vZGFtbC9sZWRnZXIvYXBpL3YxL3RyYWNlX2NvbnRleHQucHJvdG8S",
            "FmNvbS5kYW1sLmxlZGdlci5hcGkudjEaHmdvb2dsZS9wcm90b2J1Zi93cmFw",
            "cGVycy5wcm90byKbAQoMVHJhY2VDb250ZXh0EhkKDXRyYWNlX2lkX2hpZ2gY",
            "ASABKARCAjABEhQKCHRyYWNlX2lkGAIgASgEQgIwARITCgdzcGFuX2lkGAMg",
            "ASgEQgIwARI0Cg5wYXJlbnRfc3Bhbl9pZBgEIAEoCzIcLmdvb2dsZS5wcm90",
            "b2J1Zi5VSW50NjRWYWx1ZRIPCgdzYW1wbGVkGAUgASgIQkkKFmNvbS5kYW1s",
            "LmxlZGdlci5hcGkudjFCFlRyYWNlQ29udGV4dE91dGVyQ2xhc3OqAhZDb20u",
            "RGFtbC5MZWRnZXIuQXBpLlYxYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Daml.Ledger.Api.V1.TraceContext), global::Com.Daml.Ledger.Api.V1.TraceContext.Parser, new[]{ "TraceIdHigh", "TraceId", "SpanId", "ParentSpanId", "Sampled" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Data structure to propagate Zipkin trace information.
  /// See https://github.com/openzipkin/b3-propagation
  /// Trace identifiers are 64 or 128-bit, but all span identifiers within a trace are 64-bit. All identifiers are opaque.
  /// </summary>
  public sealed partial class TraceContext : pb::IMessage<TraceContext>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TraceContext> _parser = new pb::MessageParser<TraceContext>(() => new TraceContext());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TraceContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Daml.Ledger.Api.V1.TraceContextReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceContext(TraceContext other) : this() {
      traceIdHigh_ = other.traceIdHigh_;
      traceId_ = other.traceId_;
      spanId_ = other.spanId_;
      ParentSpanId = other.ParentSpanId;
      sampled_ = other.sampled_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceContext Clone() {
      return new TraceContext(this);
    }

    /// <summary>Field number for the "trace_id_high" field.</summary>
    public const int TraceIdHighFieldNumber = 1;
    private ulong traceIdHigh_;
    /// <summary>
    /// If present, this is the high 64 bits of the 128-bit identifier. Otherwise the trace ID is 64 bits long.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TraceIdHigh {
      get { return traceIdHigh_; }
      set {
        traceIdHigh_ = value;
      }
    }

    /// <summary>Field number for the "trace_id" field.</summary>
    public const int TraceIdFieldNumber = 2;
    private ulong traceId_;
    /// <summary>
    /// The TraceId is 64 or 128-bit in length and indicates the overall ID of the trace. Every span in a trace shares this ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TraceId {
      get { return traceId_; }
      set {
        traceId_ = value;
      }
    }

    /// <summary>Field number for the "span_id" field.</summary>
    public const int SpanIdFieldNumber = 3;
    private ulong spanId_;
    /// <summary>
    /// The SpanId is 64-bit in length and indicates the position of the current operation in the trace tree.
    /// The value should not be interpreted: it may or may not be derived from the value of the TraceId.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SpanId {
      get { return spanId_; }
      set {
        spanId_ = value;
      }
    }

    /// <summary>Field number for the "parent_span_id" field.</summary>
    public const int ParentSpanIdFieldNumber = 4;
    private static readonly pb::FieldCodec<ulong?> _single_parentSpanId_codec = pb::FieldCodec.ForStructWrapper<ulong>(34);
    private ulong? parentSpanId_;
    /// <summary>
    /// The ParentSpanId is 64-bit in length and indicates the position of the parent operation in the trace tree.
    /// When the span is the root of the trace tree, the ParentSpanId is absent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong? ParentSpanId {
      get { return parentSpanId_; }
      set {
        parentSpanId_ = value;
      }
    }


    /// <summary>Field number for the "sampled" field.</summary>
    public const int SampledFieldNumber = 5;
    private bool sampled_;
    /// <summary>
    /// When the sampled decision is accept, report this span to the tracing system. When it is reject, do not.
    /// When B3 attributes are sent without a sampled decision, the receiver should make one.
    /// Once the sampling decision is made, the same value should be consistently sent downstream.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Sampled {
      get { return sampled_; }
      set {
        sampled_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TraceContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TraceContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TraceIdHigh != other.TraceIdHigh) return false;
      if (TraceId != other.TraceId) return false;
      if (SpanId != other.SpanId) return false;
      if (ParentSpanId != other.ParentSpanId) return false;
      if (Sampled != other.Sampled) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TraceIdHigh != 0UL) hash ^= TraceIdHigh.GetHashCode();
      if (TraceId != 0UL) hash ^= TraceId.GetHashCode();
      if (SpanId != 0UL) hash ^= SpanId.GetHashCode();
      if (parentSpanId_ != null) hash ^= ParentSpanId.GetHashCode();
      if (Sampled != false) hash ^= Sampled.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TraceIdHigh != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TraceIdHigh);
      }
      if (TraceId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TraceId);
      }
      if (SpanId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SpanId);
      }
      if (parentSpanId_ != null) {
        _single_parentSpanId_codec.WriteTagAndValue(output, ParentSpanId);
      }
      if (Sampled != false) {
        output.WriteRawTag(40);
        output.WriteBool(Sampled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TraceIdHigh != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TraceIdHigh);
      }
      if (TraceId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TraceId);
      }
      if (SpanId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SpanId);
      }
      if (parentSpanId_ != null) {
        _single_parentSpanId_codec.WriteTagAndValue(ref output, ParentSpanId);
      }
      if (Sampled != false) {
        output.WriteRawTag(40);
        output.WriteBool(Sampled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TraceIdHigh != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TraceIdHigh);
      }
      if (TraceId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TraceId);
      }
      if (SpanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SpanId);
      }
      if (parentSpanId_ != null) {
        size += _single_parentSpanId_codec.CalculateSizeWithTag(ParentSpanId);
      }
      if (Sampled != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TraceContext other) {
      if (other == null) {
        return;
      }
      if (other.TraceIdHigh != 0UL) {
        TraceIdHigh = other.TraceIdHigh;
      }
      if (other.TraceId != 0UL) {
        TraceId = other.TraceId;
      }
      if (other.SpanId != 0UL) {
        SpanId = other.SpanId;
      }
      if (other.parentSpanId_ != null) {
        if (parentSpanId_ == null || other.ParentSpanId != 0UL) {
          ParentSpanId = other.ParentSpanId;
        }
      }
      if (other.Sampled != false) {
        Sampled = other.Sampled;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TraceIdHigh = input.ReadUInt64();
            break;
          }
          case 16: {
            TraceId = input.ReadUInt64();
            break;
          }
          case 24: {
            SpanId = input.ReadUInt64();
            break;
          }
          case 34: {
            ulong? value = _single_parentSpanId_codec.Read(input);
            if (parentSpanId_ == null || value != 0UL) {
              ParentSpanId = value;
            }
            break;
          }
          case 40: {
            Sampled = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TraceIdHigh = input.ReadUInt64();
            break;
          }
          case 16: {
            TraceId = input.ReadUInt64();
            break;
          }
          case 24: {
            SpanId = input.ReadUInt64();
            break;
          }
          case 34: {
            ulong? value = _single_parentSpanId_codec.Read(ref input);
            if (parentSpanId_ == null || value != 0UL) {
              ParentSpanId = value;
            }
            break;
          }
          case 40: {
            Sampled = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
