// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: com/daml/ledger/api/v1/event.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Com.Daml.Ledger.Api.V1 {

  /// <summary>Holder for reflection information generated from com/daml/ledger/api/v1/event.proto</summary>
  public static partial class EventReflection {

    #region Descriptor
    /// <summary>File descriptor for com/daml/ledger/api/v1/event.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EventReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJjb20vZGFtbC9sZWRnZXIvYXBpL3YxL2V2ZW50LnByb3RvEhZjb20uZGFt",
            "bC5sZWRnZXIuYXBpLnYxGiJjb20vZGFtbC9sZWRnZXIvYXBpL3YxL3ZhbHVl",
            "LnByb3RvGh5nb29nbGUvcHJvdG9idWYvd3JhcHBlcnMucHJvdG8ilQEKBUV2",
            "ZW50EjcKB2NyZWF0ZWQYASABKAsyJC5jb20uZGFtbC5sZWRnZXIuYXBpLnYx",
            "LkNyZWF0ZWRFdmVudEgAEjkKCGFyY2hpdmVkGAMgASgLMiUuY29tLmRhbWwu",
            "bGVkZ2VyLmFwaS52MS5BcmNoaXZlZEV2ZW50SABCBwoFZXZlbnRKBAgCEANS",
            "CWV4ZXJjaXNlZCLUAgoMQ3JlYXRlZEV2ZW50EhAKCGV2ZW50X2lkGAEgASgJ",
            "EhMKC2NvbnRyYWN0X2lkGAIgASgJEjcKC3RlbXBsYXRlX2lkGAMgASgLMiIu",
            "Y29tLmRhbWwubGVkZ2VyLmFwaS52MS5JZGVudGlmaWVyEjMKDGNvbnRyYWN0",
            "X2tleRgHIAEoCzIdLmNvbS5kYW1sLmxlZGdlci5hcGkudjEuVmFsdWUSOAoQ",
            "Y3JlYXRlX2FyZ3VtZW50cxgEIAEoCzIeLmNvbS5kYW1sLmxlZGdlci5hcGku",
            "djEuUmVjb3JkEhcKD3dpdG5lc3NfcGFydGllcxgFIAMoCRITCgtzaWduYXRv",
            "cmllcxgIIAMoCRIRCglvYnNlcnZlcnMYCSADKAkSNAoOYWdyZWVtZW50X3Rl",
            "eHQYBiABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUiiAEKDUFy",
            "Y2hpdmVkRXZlbnQSEAoIZXZlbnRfaWQYASABKAkSEwoLY29udHJhY3RfaWQY",
            "AiABKAkSNwoLdGVtcGxhdGVfaWQYAyABKAsyIi5jb20uZGFtbC5sZWRnZXIu",
            "YXBpLnYxLklkZW50aWZpZXISFwoPd2l0bmVzc19wYXJ0aWVzGAQgAygJItkC",
            "Cg5FeGVyY2lzZWRFdmVudBIQCghldmVudF9pZBgBIAEoCRITCgtjb250cmFj",
            "dF9pZBgCIAEoCRI3Cgt0ZW1wbGF0ZV9pZBgDIAEoCzIiLmNvbS5kYW1sLmxl",
            "ZGdlci5hcGkudjEuSWRlbnRpZmllchIOCgZjaG9pY2UYBSABKAkSNgoPY2hv",
            "aWNlX2FyZ3VtZW50GAYgASgLMh0uY29tLmRhbWwubGVkZ2VyLmFwaS52MS5W",
            "YWx1ZRIWCg5hY3RpbmdfcGFydGllcxgHIAMoCRIRCgljb25zdW1pbmcYCCAB",
            "KAgSFwoPd2l0bmVzc19wYXJ0aWVzGAogAygJEhcKD2NoaWxkX2V2ZW50X2lk",
            "cxgLIAMoCRI2Cg9leGVyY2lzZV9yZXN1bHQYDCABKAsyHS5jb20uZGFtbC5s",
            "ZWRnZXIuYXBpLnYxLlZhbHVlSgQIBBAFSgQICRAKQkIKFmNvbS5kYW1sLmxl",
            "ZGdlci5hcGkudjFCD0V2ZW50T3V0ZXJDbGFzc6oCFkNvbS5EYW1sLkxlZGdl",
            "ci5BcGkuVjFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Com.Daml.Ledger.Api.V1.ValueReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Daml.Ledger.Api.V1.Event), global::Com.Daml.Ledger.Api.V1.Event.Parser, new[]{ "Created", "Archived" }, new[]{ "Event" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Daml.Ledger.Api.V1.CreatedEvent), global::Com.Daml.Ledger.Api.V1.CreatedEvent.Parser, new[]{ "EventId", "ContractId", "TemplateId", "ContractKey", "CreateArguments", "WitnessParties", "Signatories", "Observers", "AgreementText" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Daml.Ledger.Api.V1.ArchivedEvent), global::Com.Daml.Ledger.Api.V1.ArchivedEvent.Parser, new[]{ "EventId", "ContractId", "TemplateId", "WitnessParties" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Com.Daml.Ledger.Api.V1.ExercisedEvent), global::Com.Daml.Ledger.Api.V1.ExercisedEvent.Parser, new[]{ "EventId", "ContractId", "TemplateId", "Choice", "ChoiceArgument", "ActingParties", "Consuming", "WitnessParties", "ChildEventIds", "ExerciseResult" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// An event in the flat transaction stream can either be the creation
  /// or the archiving of a contract.
  ///
  /// In the transaction service the events are restricted to the events
  /// visible for the parties specified in the transaction filter. Each
  /// event message type below contains a ``witness_parties`` field which
  /// indicates the subset of the requested parties that can see the event
  /// in question. In the flat transaction stream you'll only receive events
  /// that have witnesses.
  /// </summary>
  public sealed partial class Event : pb::IMessage<Event>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Daml.Ledger.Api.V1.EventReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event(Event other) : this() {
      switch (other.EventCase) {
        case EventOneofCase.Created:
          Created = other.Created.Clone();
          break;
        case EventOneofCase.Archived:
          Archived = other.Archived.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event Clone() {
      return new Event(this);
    }

    /// <summary>Field number for the "created" field.</summary>
    public const int CreatedFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Daml.Ledger.Api.V1.CreatedEvent Created {
      get { return eventCase_ == EventOneofCase.Created ? (global::Com.Daml.Ledger.Api.V1.CreatedEvent) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.Created;
      }
    }

    /// <summary>Field number for the "archived" field.</summary>
    public const int ArchivedFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Daml.Ledger.Api.V1.ArchivedEvent Archived {
      get { return eventCase_ == EventOneofCase.Archived ? (global::Com.Daml.Ledger.Api.V1.ArchivedEvent) event_ : null; }
      set {
        event_ = value;
        eventCase_ = value == null ? EventOneofCase.None : EventOneofCase.Archived;
      }
    }

    private object event_;
    /// <summary>Enum of possible cases for the "event" oneof.</summary>
    public enum EventOneofCase {
      None = 0,
      Created = 1,
      Archived = 3,
    }
    private EventOneofCase eventCase_ = EventOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EventOneofCase EventCase {
      get { return eventCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEvent() {
      eventCase_ = EventOneofCase.None;
      event_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Created, other.Created)) return false;
      if (!object.Equals(Archived, other.Archived)) return false;
      if (EventCase != other.EventCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (eventCase_ == EventOneofCase.Created) hash ^= Created.GetHashCode();
      if (eventCase_ == EventOneofCase.Archived) hash ^= Archived.GetHashCode();
      hash ^= (int) eventCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (eventCase_ == EventOneofCase.Created) {
        output.WriteRawTag(10);
        output.WriteMessage(Created);
      }
      if (eventCase_ == EventOneofCase.Archived) {
        output.WriteRawTag(26);
        output.WriteMessage(Archived);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (eventCase_ == EventOneofCase.Created) {
        output.WriteRawTag(10);
        output.WriteMessage(Created);
      }
      if (eventCase_ == EventOneofCase.Archived) {
        output.WriteRawTag(26);
        output.WriteMessage(Archived);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (eventCase_ == EventOneofCase.Created) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Created);
      }
      if (eventCase_ == EventOneofCase.Archived) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Archived);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Event other) {
      if (other == null) {
        return;
      }
      switch (other.EventCase) {
        case EventOneofCase.Created:
          if (Created == null) {
            Created = new global::Com.Daml.Ledger.Api.V1.CreatedEvent();
          }
          Created.MergeFrom(other.Created);
          break;
        case EventOneofCase.Archived:
          if (Archived == null) {
            Archived = new global::Com.Daml.Ledger.Api.V1.ArchivedEvent();
          }
          Archived.MergeFrom(other.Archived);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Com.Daml.Ledger.Api.V1.CreatedEvent subBuilder = new global::Com.Daml.Ledger.Api.V1.CreatedEvent();
            if (eventCase_ == EventOneofCase.Created) {
              subBuilder.MergeFrom(Created);
            }
            input.ReadMessage(subBuilder);
            Created = subBuilder;
            break;
          }
          case 26: {
            global::Com.Daml.Ledger.Api.V1.ArchivedEvent subBuilder = new global::Com.Daml.Ledger.Api.V1.ArchivedEvent();
            if (eventCase_ == EventOneofCase.Archived) {
              subBuilder.MergeFrom(Archived);
            }
            input.ReadMessage(subBuilder);
            Archived = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Com.Daml.Ledger.Api.V1.CreatedEvent subBuilder = new global::Com.Daml.Ledger.Api.V1.CreatedEvent();
            if (eventCase_ == EventOneofCase.Created) {
              subBuilder.MergeFrom(Created);
            }
            input.ReadMessage(subBuilder);
            Created = subBuilder;
            break;
          }
          case 26: {
            global::Com.Daml.Ledger.Api.V1.ArchivedEvent subBuilder = new global::Com.Daml.Ledger.Api.V1.ArchivedEvent();
            if (eventCase_ == EventOneofCase.Archived) {
              subBuilder.MergeFrom(Archived);
            }
            input.ReadMessage(subBuilder);
            Archived = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Records that a contract has been created, and choices may now be exercised on it.
  /// </summary>
  public sealed partial class CreatedEvent : pb::IMessage<CreatedEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CreatedEvent> _parser = new pb::MessageParser<CreatedEvent>(() => new CreatedEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreatedEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Daml.Ledger.Api.V1.EventReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatedEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatedEvent(CreatedEvent other) : this() {
      eventId_ = other.eventId_;
      contractId_ = other.contractId_;
      templateId_ = other.templateId_ != null ? other.templateId_.Clone() : null;
      contractKey_ = other.contractKey_ != null ? other.contractKey_.Clone() : null;
      createArguments_ = other.createArguments_ != null ? other.createArguments_.Clone() : null;
      witnessParties_ = other.witnessParties_.Clone();
      signatories_ = other.signatories_.Clone();
      observers_ = other.observers_.Clone();
      AgreementText = other.AgreementText;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatedEvent Clone() {
      return new CreatedEvent(this);
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 1;
    private string eventId_ = "";
    /// <summary>
    /// The ID of this particular event.
    /// Must be a valid LedgerString (as described in ``value.proto``).
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventId {
      get { return eventId_; }
      set {
        eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contract_id" field.</summary>
    public const int ContractIdFieldNumber = 2;
    private string contractId_ = "";
    /// <summary>
    /// The ID of the created contract.
    /// Must be a valid LedgerString (as described in ``value.proto``).
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContractId {
      get { return contractId_; }
      set {
        contractId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "template_id" field.</summary>
    public const int TemplateIdFieldNumber = 3;
    private global::Com.Daml.Ledger.Api.V1.Identifier templateId_;
    /// <summary>
    /// The template of the created contract.
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Daml.Ledger.Api.V1.Identifier TemplateId {
      get { return templateId_; }
      set {
        templateId_ = value;
      }
    }

    /// <summary>Field number for the "contract_key" field.</summary>
    public const int ContractKeyFieldNumber = 7;
    private global::Com.Daml.Ledger.Api.V1.Value contractKey_;
    /// <summary>
    /// The key of the created contract, if defined.
    /// Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Daml.Ledger.Api.V1.Value ContractKey {
      get { return contractKey_; }
      set {
        contractKey_ = value;
      }
    }

    /// <summary>Field number for the "create_arguments" field.</summary>
    public const int CreateArgumentsFieldNumber = 4;
    private global::Com.Daml.Ledger.Api.V1.Record createArguments_;
    /// <summary>
    /// The arguments that have been used to create the contract.
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Daml.Ledger.Api.V1.Record CreateArguments {
      get { return createArguments_; }
      set {
        createArguments_ = value;
      }
    }

    /// <summary>Field number for the "witness_parties" field.</summary>
    public const int WitnessPartiesFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_witnessParties_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> witnessParties_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The parties that are notified of this event. When a `CreatedEvent`
    /// is returned as part of a transaction tree, this will include all
    /// the parties specified in the `TransactionFilter` that are informees
    /// of the event. If served as part of a flat transaction those will
    /// be limited to all parties specified in the `TransactionFilter` that
    /// are stakeholders of the contract (i.e. either signatories or observers).
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> WitnessParties {
      get { return witnessParties_; }
    }

    /// <summary>Field number for the "signatories" field.</summary>
    public const int SignatoriesFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_signatories_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> signatories_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The signatories for this contract as specified by the template.
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Signatories {
      get { return signatories_; }
    }

    /// <summary>Field number for the "observers" field.</summary>
    public const int ObserversFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_observers_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> observers_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The observers for this contract as specified explicitly by the template or implicitly as choice controllers.
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Observers {
      get { return observers_; }
    }

    /// <summary>Field number for the "agreement_text" field.</summary>
    public const int AgreementTextFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _single_agreementText_codec = pb::FieldCodec.ForClassWrapper<string>(50);
    private string agreementText_;
    /// <summary>
    /// The agreement text of the contract.
    /// We use StringValue to properly reflect optionality on the wire for backwards compatibility.
    /// This is necessary since the empty string is an acceptable (and in fact the default) agreement
    /// text, but also the default string in protobuf.
    /// This means a newer client works with an older sandbox seamlessly.
    /// Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AgreementText {
      get { return agreementText_; }
      set {
        agreementText_ = value;
      }
    }


    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreatedEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreatedEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (ContractId != other.ContractId) return false;
      if (!object.Equals(TemplateId, other.TemplateId)) return false;
      if (!object.Equals(ContractKey, other.ContractKey)) return false;
      if (!object.Equals(CreateArguments, other.CreateArguments)) return false;
      if(!witnessParties_.Equals(other.witnessParties_)) return false;
      if(!signatories_.Equals(other.signatories_)) return false;
      if(!observers_.Equals(other.observers_)) return false;
      if (AgreementText != other.AgreementText) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventId.Length != 0) hash ^= EventId.GetHashCode();
      if (ContractId.Length != 0) hash ^= ContractId.GetHashCode();
      if (templateId_ != null) hash ^= TemplateId.GetHashCode();
      if (contractKey_ != null) hash ^= ContractKey.GetHashCode();
      if (createArguments_ != null) hash ^= CreateArguments.GetHashCode();
      hash ^= witnessParties_.GetHashCode();
      hash ^= signatories_.GetHashCode();
      hash ^= observers_.GetHashCode();
      if (agreementText_ != null) hash ^= AgreementText.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (EventId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (ContractId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ContractId);
      }
      if (templateId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TemplateId);
      }
      if (createArguments_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CreateArguments);
      }
      witnessParties_.WriteTo(output, _repeated_witnessParties_codec);
      if (agreementText_ != null) {
        _single_agreementText_codec.WriteTagAndValue(output, AgreementText);
      }
      if (contractKey_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ContractKey);
      }
      signatories_.WriteTo(output, _repeated_signatories_codec);
      observers_.WriteTo(output, _repeated_observers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (EventId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (ContractId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ContractId);
      }
      if (templateId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TemplateId);
      }
      if (createArguments_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(CreateArguments);
      }
      witnessParties_.WriteTo(ref output, _repeated_witnessParties_codec);
      if (agreementText_ != null) {
        _single_agreementText_codec.WriteTagAndValue(ref output, AgreementText);
      }
      if (contractKey_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ContractKey);
      }
      signatories_.WriteTo(ref output, _repeated_signatories_codec);
      observers_.WriteTo(ref output, _repeated_observers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
      }
      if (ContractId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContractId);
      }
      if (templateId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TemplateId);
      }
      if (contractKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractKey);
      }
      if (createArguments_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateArguments);
      }
      size += witnessParties_.CalculateSize(_repeated_witnessParties_codec);
      size += signatories_.CalculateSize(_repeated_signatories_codec);
      size += observers_.CalculateSize(_repeated_observers_codec);
      if (agreementText_ != null) {
        size += _single_agreementText_codec.CalculateSizeWithTag(AgreementText);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreatedEvent other) {
      if (other == null) {
        return;
      }
      if (other.EventId.Length != 0) {
        EventId = other.EventId;
      }
      if (other.ContractId.Length != 0) {
        ContractId = other.ContractId;
      }
      if (other.templateId_ != null) {
        if (templateId_ == null) {
          TemplateId = new global::Com.Daml.Ledger.Api.V1.Identifier();
        }
        TemplateId.MergeFrom(other.TemplateId);
      }
      if (other.contractKey_ != null) {
        if (contractKey_ == null) {
          ContractKey = new global::Com.Daml.Ledger.Api.V1.Value();
        }
        ContractKey.MergeFrom(other.ContractKey);
      }
      if (other.createArguments_ != null) {
        if (createArguments_ == null) {
          CreateArguments = new global::Com.Daml.Ledger.Api.V1.Record();
        }
        CreateArguments.MergeFrom(other.CreateArguments);
      }
      witnessParties_.Add(other.witnessParties_);
      signatories_.Add(other.signatories_);
      observers_.Add(other.observers_);
      if (other.agreementText_ != null) {
        if (agreementText_ == null || other.AgreementText != "") {
          AgreementText = other.AgreementText;
        }
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
          case 18: {
            ContractId = input.ReadString();
            break;
          }
          case 26: {
            if (templateId_ == null) {
              TemplateId = new global::Com.Daml.Ledger.Api.V1.Identifier();
            }
            input.ReadMessage(TemplateId);
            break;
          }
          case 34: {
            if (createArguments_ == null) {
              CreateArguments = new global::Com.Daml.Ledger.Api.V1.Record();
            }
            input.ReadMessage(CreateArguments);
            break;
          }
          case 42: {
            witnessParties_.AddEntriesFrom(input, _repeated_witnessParties_codec);
            break;
          }
          case 50: {
            string value = _single_agreementText_codec.Read(input);
            if (agreementText_ == null || value != "") {
              AgreementText = value;
            }
            break;
          }
          case 58: {
            if (contractKey_ == null) {
              ContractKey = new global::Com.Daml.Ledger.Api.V1.Value();
            }
            input.ReadMessage(ContractKey);
            break;
          }
          case 66: {
            signatories_.AddEntriesFrom(input, _repeated_signatories_codec);
            break;
          }
          case 74: {
            observers_.AddEntriesFrom(input, _repeated_observers_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
          case 18: {
            ContractId = input.ReadString();
            break;
          }
          case 26: {
            if (templateId_ == null) {
              TemplateId = new global::Com.Daml.Ledger.Api.V1.Identifier();
            }
            input.ReadMessage(TemplateId);
            break;
          }
          case 34: {
            if (createArguments_ == null) {
              CreateArguments = new global::Com.Daml.Ledger.Api.V1.Record();
            }
            input.ReadMessage(CreateArguments);
            break;
          }
          case 42: {
            witnessParties_.AddEntriesFrom(ref input, _repeated_witnessParties_codec);
            break;
          }
          case 50: {
            string value = _single_agreementText_codec.Read(ref input);
            if (agreementText_ == null || value != "") {
              AgreementText = value;
            }
            break;
          }
          case 58: {
            if (contractKey_ == null) {
              ContractKey = new global::Com.Daml.Ledger.Api.V1.Value();
            }
            input.ReadMessage(ContractKey);
            break;
          }
          case 66: {
            signatories_.AddEntriesFrom(ref input, _repeated_signatories_codec);
            break;
          }
          case 74: {
            observers_.AddEntriesFrom(ref input, _repeated_observers_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Records that a contract has been archived, and choices may no longer be exercised on it.
  /// </summary>
  public sealed partial class ArchivedEvent : pb::IMessage<ArchivedEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ArchivedEvent> _parser = new pb::MessageParser<ArchivedEvent>(() => new ArchivedEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArchivedEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Daml.Ledger.Api.V1.EventReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArchivedEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArchivedEvent(ArchivedEvent other) : this() {
      eventId_ = other.eventId_;
      contractId_ = other.contractId_;
      templateId_ = other.templateId_ != null ? other.templateId_.Clone() : null;
      witnessParties_ = other.witnessParties_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArchivedEvent Clone() {
      return new ArchivedEvent(this);
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 1;
    private string eventId_ = "";
    /// <summary>
    /// The ID of this particular event.
    /// Must be a valid LedgerString (as described in ``value.proto``).
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventId {
      get { return eventId_; }
      set {
        eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contract_id" field.</summary>
    public const int ContractIdFieldNumber = 2;
    private string contractId_ = "";
    /// <summary>
    /// The ID of the archived contract.
    /// Must be a valid LedgerString (as described in ``value.proto``).
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContractId {
      get { return contractId_; }
      set {
        contractId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "template_id" field.</summary>
    public const int TemplateIdFieldNumber = 3;
    private global::Com.Daml.Ledger.Api.V1.Identifier templateId_;
    /// <summary>
    /// The template of the archived contract.
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Daml.Ledger.Api.V1.Identifier TemplateId {
      get { return templateId_; }
      set {
        templateId_ = value;
      }
    }

    /// <summary>Field number for the "witness_parties" field.</summary>
    public const int WitnessPartiesFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_witnessParties_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> witnessParties_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The parties that are notified of this event. For `ArchivedEvent`s,
    /// these are the intersection of the stakeholders of the contract in
    /// question and the parties specified in the `TransactionFilter`. The
    /// stakeholders are the union of the signatories and the observers of
    /// the contract.
    /// Each one of its elements must be a valid PartyIdString (as descibed
    /// in ``value.proto``).
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> WitnessParties {
      get { return witnessParties_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArchivedEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArchivedEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (ContractId != other.ContractId) return false;
      if (!object.Equals(TemplateId, other.TemplateId)) return false;
      if(!witnessParties_.Equals(other.witnessParties_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventId.Length != 0) hash ^= EventId.GetHashCode();
      if (ContractId.Length != 0) hash ^= ContractId.GetHashCode();
      if (templateId_ != null) hash ^= TemplateId.GetHashCode();
      hash ^= witnessParties_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (EventId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (ContractId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ContractId);
      }
      if (templateId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TemplateId);
      }
      witnessParties_.WriteTo(output, _repeated_witnessParties_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (EventId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (ContractId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ContractId);
      }
      if (templateId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TemplateId);
      }
      witnessParties_.WriteTo(ref output, _repeated_witnessParties_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
      }
      if (ContractId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContractId);
      }
      if (templateId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TemplateId);
      }
      size += witnessParties_.CalculateSize(_repeated_witnessParties_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArchivedEvent other) {
      if (other == null) {
        return;
      }
      if (other.EventId.Length != 0) {
        EventId = other.EventId;
      }
      if (other.ContractId.Length != 0) {
        ContractId = other.ContractId;
      }
      if (other.templateId_ != null) {
        if (templateId_ == null) {
          TemplateId = new global::Com.Daml.Ledger.Api.V1.Identifier();
        }
        TemplateId.MergeFrom(other.TemplateId);
      }
      witnessParties_.Add(other.witnessParties_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
          case 18: {
            ContractId = input.ReadString();
            break;
          }
          case 26: {
            if (templateId_ == null) {
              TemplateId = new global::Com.Daml.Ledger.Api.V1.Identifier();
            }
            input.ReadMessage(TemplateId);
            break;
          }
          case 34: {
            witnessParties_.AddEntriesFrom(input, _repeated_witnessParties_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
          case 18: {
            ContractId = input.ReadString();
            break;
          }
          case 26: {
            if (templateId_ == null) {
              TemplateId = new global::Com.Daml.Ledger.Api.V1.Identifier();
            }
            input.ReadMessage(TemplateId);
            break;
          }
          case 34: {
            witnessParties_.AddEntriesFrom(ref input, _repeated_witnessParties_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Records that a choice has been exercised on a target contract.
  /// </summary>
  public sealed partial class ExercisedEvent : pb::IMessage<ExercisedEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ExercisedEvent> _parser = new pb::MessageParser<ExercisedEvent>(() => new ExercisedEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExercisedEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Com.Daml.Ledger.Api.V1.EventReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExercisedEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExercisedEvent(ExercisedEvent other) : this() {
      eventId_ = other.eventId_;
      contractId_ = other.contractId_;
      templateId_ = other.templateId_ != null ? other.templateId_.Clone() : null;
      choice_ = other.choice_;
      choiceArgument_ = other.choiceArgument_ != null ? other.choiceArgument_.Clone() : null;
      actingParties_ = other.actingParties_.Clone();
      consuming_ = other.consuming_;
      witnessParties_ = other.witnessParties_.Clone();
      childEventIds_ = other.childEventIds_.Clone();
      exerciseResult_ = other.exerciseResult_ != null ? other.exerciseResult_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExercisedEvent Clone() {
      return new ExercisedEvent(this);
    }

    /// <summary>Field number for the "event_id" field.</summary>
    public const int EventIdFieldNumber = 1;
    private string eventId_ = "";
    /// <summary>
    /// The ID of this particular event.
    /// Must be a valid LedgerString (as described in ``value.proto``).
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EventId {
      get { return eventId_; }
      set {
        eventId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contract_id" field.</summary>
    public const int ContractIdFieldNumber = 2;
    private string contractId_ = "";
    /// <summary>
    /// The ID of the target contract.
    /// Must be a valid LedgerString (as described in ``value.proto``).
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContractId {
      get { return contractId_; }
      set {
        contractId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "template_id" field.</summary>
    public const int TemplateIdFieldNumber = 3;
    private global::Com.Daml.Ledger.Api.V1.Identifier templateId_;
    /// <summary>
    /// The template of the target contract.
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Daml.Ledger.Api.V1.Identifier TemplateId {
      get { return templateId_; }
      set {
        templateId_ = value;
      }
    }

    /// <summary>Field number for the "choice" field.</summary>
    public const int ChoiceFieldNumber = 5;
    private string choice_ = "";
    /// <summary>
    /// The choice that's been exercised on the target contract.
    /// Must be a valid NameString (as described in ``value.proto``).
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Choice {
      get { return choice_; }
      set {
        choice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "choice_argument" field.</summary>
    public const int ChoiceArgumentFieldNumber = 6;
    private global::Com.Daml.Ledger.Api.V1.Value choiceArgument_;
    /// <summary>
    /// The argument the choice was made with.
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Daml.Ledger.Api.V1.Value ChoiceArgument {
      get { return choiceArgument_; }
      set {
        choiceArgument_ = value;
      }
    }

    /// <summary>Field number for the "acting_parties" field.</summary>
    public const int ActingPartiesFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_actingParties_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> actingParties_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The parties that made the choice.
    /// Each element must be a valid PartyIdString (as described in ``value.proto``).
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ActingParties {
      get { return actingParties_; }
    }

    /// <summary>Field number for the "consuming" field.</summary>
    public const int ConsumingFieldNumber = 8;
    private bool consuming_;
    /// <summary>
    /// If true, the target contract may no longer be exercised.
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Consuming {
      get { return consuming_; }
      set {
        consuming_ = value;
      }
    }

    /// <summary>Field number for the "witness_parties" field.</summary>
    public const int WitnessPartiesFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_witnessParties_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> witnessParties_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// The parties that are notified of this event. The witnesses of an exercise
    /// node will depend on whether the exercise was consuming or not.
    /// If consuming, the witnesses are the union of the stakeholders and
    /// the actors.
    /// If not consuming, the witnesses are the union of the signatories and
    /// the actors. Note that the actors might not necessarily be observers
    /// and thus signatories. This is the case when the controllers of a
    /// choice are specified using "flexible controllers", using the
    /// `choice ... controller` syntax, and said controllers are not
    /// explicitly marked as observers.
    /// Each element must be a valid PartyIdString (as described in ``value.proto``).
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> WitnessParties {
      get { return witnessParties_; }
    }

    /// <summary>Field number for the "child_event_ids" field.</summary>
    public const int ChildEventIdsFieldNumber = 11;
    private static readonly pb::FieldCodec<string> _repeated_childEventIds_codec
        = pb::FieldCodec.ForString(90);
    private readonly pbc::RepeatedField<string> childEventIds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// References to further events in the same transaction that appeared as a result of this ``ExercisedEvent``.
    /// It contains only the immediate children of this event, not all members of the subtree rooted at this node.
    /// Each element must be a valid LedgerString (as described in ``value.proto``).
    /// Optional
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ChildEventIds {
      get { return childEventIds_; }
    }

    /// <summary>Field number for the "exercise_result" field.</summary>
    public const int ExerciseResultFieldNumber = 12;
    private global::Com.Daml.Ledger.Api.V1.Value exerciseResult_;
    /// <summary>
    /// The result of exercising the choice
    /// Required
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Com.Daml.Ledger.Api.V1.Value ExerciseResult {
      get { return exerciseResult_; }
      set {
        exerciseResult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExercisedEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExercisedEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventId != other.EventId) return false;
      if (ContractId != other.ContractId) return false;
      if (!object.Equals(TemplateId, other.TemplateId)) return false;
      if (Choice != other.Choice) return false;
      if (!object.Equals(ChoiceArgument, other.ChoiceArgument)) return false;
      if(!actingParties_.Equals(other.actingParties_)) return false;
      if (Consuming != other.Consuming) return false;
      if(!witnessParties_.Equals(other.witnessParties_)) return false;
      if(!childEventIds_.Equals(other.childEventIds_)) return false;
      if (!object.Equals(ExerciseResult, other.ExerciseResult)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventId.Length != 0) hash ^= EventId.GetHashCode();
      if (ContractId.Length != 0) hash ^= ContractId.GetHashCode();
      if (templateId_ != null) hash ^= TemplateId.GetHashCode();
      if (Choice.Length != 0) hash ^= Choice.GetHashCode();
      if (choiceArgument_ != null) hash ^= ChoiceArgument.GetHashCode();
      hash ^= actingParties_.GetHashCode();
      if (Consuming != false) hash ^= Consuming.GetHashCode();
      hash ^= witnessParties_.GetHashCode();
      hash ^= childEventIds_.GetHashCode();
      if (exerciseResult_ != null) hash ^= ExerciseResult.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (EventId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (ContractId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ContractId);
      }
      if (templateId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TemplateId);
      }
      if (Choice.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Choice);
      }
      if (choiceArgument_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ChoiceArgument);
      }
      actingParties_.WriteTo(output, _repeated_actingParties_codec);
      if (Consuming != false) {
        output.WriteRawTag(64);
        output.WriteBool(Consuming);
      }
      witnessParties_.WriteTo(output, _repeated_witnessParties_codec);
      childEventIds_.WriteTo(output, _repeated_childEventIds_codec);
      if (exerciseResult_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(ExerciseResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (EventId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EventId);
      }
      if (ContractId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ContractId);
      }
      if (templateId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TemplateId);
      }
      if (Choice.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Choice);
      }
      if (choiceArgument_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ChoiceArgument);
      }
      actingParties_.WriteTo(ref output, _repeated_actingParties_codec);
      if (Consuming != false) {
        output.WriteRawTag(64);
        output.WriteBool(Consuming);
      }
      witnessParties_.WriteTo(ref output, _repeated_witnessParties_codec);
      childEventIds_.WriteTo(ref output, _repeated_childEventIds_codec);
      if (exerciseResult_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(ExerciseResult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EventId);
      }
      if (ContractId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContractId);
      }
      if (templateId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TemplateId);
      }
      if (Choice.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Choice);
      }
      if (choiceArgument_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChoiceArgument);
      }
      size += actingParties_.CalculateSize(_repeated_actingParties_codec);
      if (Consuming != false) {
        size += 1 + 1;
      }
      size += witnessParties_.CalculateSize(_repeated_witnessParties_codec);
      size += childEventIds_.CalculateSize(_repeated_childEventIds_codec);
      if (exerciseResult_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExerciseResult);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExercisedEvent other) {
      if (other == null) {
        return;
      }
      if (other.EventId.Length != 0) {
        EventId = other.EventId;
      }
      if (other.ContractId.Length != 0) {
        ContractId = other.ContractId;
      }
      if (other.templateId_ != null) {
        if (templateId_ == null) {
          TemplateId = new global::Com.Daml.Ledger.Api.V1.Identifier();
        }
        TemplateId.MergeFrom(other.TemplateId);
      }
      if (other.Choice.Length != 0) {
        Choice = other.Choice;
      }
      if (other.choiceArgument_ != null) {
        if (choiceArgument_ == null) {
          ChoiceArgument = new global::Com.Daml.Ledger.Api.V1.Value();
        }
        ChoiceArgument.MergeFrom(other.ChoiceArgument);
      }
      actingParties_.Add(other.actingParties_);
      if (other.Consuming != false) {
        Consuming = other.Consuming;
      }
      witnessParties_.Add(other.witnessParties_);
      childEventIds_.Add(other.childEventIds_);
      if (other.exerciseResult_ != null) {
        if (exerciseResult_ == null) {
          ExerciseResult = new global::Com.Daml.Ledger.Api.V1.Value();
        }
        ExerciseResult.MergeFrom(other.ExerciseResult);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
          case 18: {
            ContractId = input.ReadString();
            break;
          }
          case 26: {
            if (templateId_ == null) {
              TemplateId = new global::Com.Daml.Ledger.Api.V1.Identifier();
            }
            input.ReadMessage(TemplateId);
            break;
          }
          case 42: {
            Choice = input.ReadString();
            break;
          }
          case 50: {
            if (choiceArgument_ == null) {
              ChoiceArgument = new global::Com.Daml.Ledger.Api.V1.Value();
            }
            input.ReadMessage(ChoiceArgument);
            break;
          }
          case 58: {
            actingParties_.AddEntriesFrom(input, _repeated_actingParties_codec);
            break;
          }
          case 64: {
            Consuming = input.ReadBool();
            break;
          }
          case 82: {
            witnessParties_.AddEntriesFrom(input, _repeated_witnessParties_codec);
            break;
          }
          case 90: {
            childEventIds_.AddEntriesFrom(input, _repeated_childEventIds_codec);
            break;
          }
          case 98: {
            if (exerciseResult_ == null) {
              ExerciseResult = new global::Com.Daml.Ledger.Api.V1.Value();
            }
            input.ReadMessage(ExerciseResult);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            EventId = input.ReadString();
            break;
          }
          case 18: {
            ContractId = input.ReadString();
            break;
          }
          case 26: {
            if (templateId_ == null) {
              TemplateId = new global::Com.Daml.Ledger.Api.V1.Identifier();
            }
            input.ReadMessage(TemplateId);
            break;
          }
          case 42: {
            Choice = input.ReadString();
            break;
          }
          case 50: {
            if (choiceArgument_ == null) {
              ChoiceArgument = new global::Com.Daml.Ledger.Api.V1.Value();
            }
            input.ReadMessage(ChoiceArgument);
            break;
          }
          case 58: {
            actingParties_.AddEntriesFrom(ref input, _repeated_actingParties_codec);
            break;
          }
          case 64: {
            Consuming = input.ReadBool();
            break;
          }
          case 82: {
            witnessParties_.AddEntriesFrom(ref input, _repeated_witnessParties_codec);
            break;
          }
          case 90: {
            childEventIds_.AddEntriesFrom(ref input, _repeated_childEventIds_codec);
            break;
          }
          case 98: {
            if (exerciseResult_ == null) {
              ExerciseResult = new global::Com.Daml.Ledger.Api.V1.Value();
            }
            input.ReadMessage(ExerciseResult);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
